name: Release

on:
  push:
    tags: ['v*']
  workflow_dispatch:

env:
  CARGO_TERM_COLOR: always
  IMAGE_NAME: ${{ github.repository }}
  REGISTRY: ghcr.io

jobs:
  build-binaries:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - artifact_name: custom-ddns-linux-amd64
            os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
          - artifact_name: custom-ddns-linux-arm64
            os: ubuntu-latest
            target: aarch64-unknown-linux-gnu
          - artifact_name: custom-ddns-macos-amd64
            os: macos-latest
            target: x86_64-apple-darwin
          - artifact_name: custom-ddns-macos-arm64
            os: macos-latest
            target: aarch64-apple-darwin

    steps:
      - uses: actions/checkout@v4

      - uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}
          components: rustfmt, clippy

      - name: Install rustfmt and clippy
        run: |
          rustup component add rustfmt
          rustup component add clippy

      - name: Install target
        run: rustup target add ${{ matrix.target }}

      - name: Install cross-compilation tools
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y gcc-aarch64-linux-gnu
          if [[ "${{ matrix.target }}" == "aarch64-unknown-linux-gnu" ]]; then
            echo "CARGO_TARGET_AARCH64_UNKNOWN_LINUX_GNU_LINKER=aarch64-linux-gnu-gcc" >> $GITHUB_ENV
          fi

      - uses: actions/cache@v4
        with:
          key: ${{ runner.os }}-cargo-${{ matrix.target }}-${{ hashFiles('**/Cargo.lock') }}
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target

      - run: cargo build --release --target ${{ matrix.target }}

      - name: Prepare artifact
        run: |
          cp target/${{ matrix.target }}/release/custom-ddns ${{ matrix.artifact_name }}
          chmod +x ${{ matrix.artifact_name }}

      - uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.artifact_name }}
          path: ${{ matrix.artifact_name }}

  build-docker:
    permissions:
      contents: read
      packages: write
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        variant:
          - dockerfile: Dockerfile
            platforms: linux/amd64,linux/arm64
            suffix: ""
            cache-scope: "debian"
          - dockerfile: Dockerfile.alpine
            platforms: linux/amd64,linux/arm64
            suffix: "-alpine"
            cache-scope: "alpine"

    steps:
      - uses: actions/checkout@v4

      - uses: docker/setup-qemu-action@v3

      - uses: docker/setup-buildx-action@v3

      - uses: docker/login-action@v3
        with:
          password: ${{ secrets.GITHUB_TOKEN }}
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}

      - uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - id: meta
        uses: docker/metadata-action@v5
        with:
          images: |
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
            deimosfr/custom-ddns
          tags: |
            type=ref,event=tag,suffix=${{ matrix.variant.suffix }}
            type=raw,value=latest,suffix=${{ matrix.variant.suffix }},enable={{is_default_branch}}

      - uses: docker/build-push-action@v5
        with:
          cache-from: type=gha,scope=${{ matrix.variant.cache-scope }}
          cache-to: type=gha,mode=max,scope=${{ matrix.variant.cache-scope }}
          context: .
          file: ${{ matrix.variant.dockerfile }}
          labels: ${{ steps.meta.outputs.labels }}
          platforms: ${{ matrix.variant.platforms }}
          push: true
          tags: ${{ steps.meta.outputs.tags }}

  create-release:
    if: startsWith(github.ref, 'refs/tags/')
    needs: [build-binaries, build-docker]
    permissions:
      contents: write
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Prepare release files
        run: |
          mkdir -p release
          find artifacts -name 'custom-ddns-*' -type f | while read file; do
            cp "$file" "release/$(basename "$file")"
            chmod +x "release/$(basename "$file")"
          done
          cd release
          if [ "$(ls -1 | wc -l)" -gt 0 ]; then
            sha256sum * > checksums.txt
          else
            echo "No files found to checksum" >&2
            exit 1
          fi

      - id: extract-notes
        run: |
          if [[ "${GITHUB_REF#refs/tags/}" =~ ^v[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            echo "RELEASE_TYPE=release" >> $GITHUB_OUTPUT
          else
            echo "RELEASE_TYPE=prerelease" >> $GITHUB_OUTPUT
          fi

      - name: Generate Release Notes
        uses: release-drafter/release-drafter@v5
        id: release_drafter
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - uses: softprops/action-gh-release@v1
        with:
          body: ${{ steps.release_drafter.outputs.body }}
          draft: false
          files: release/*
          prerelease: ${{ steps.extract-notes.outputs.RELEASE_TYPE == 'prerelease' }} 